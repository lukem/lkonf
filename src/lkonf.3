.\"
.\" Copyright (c) 2014 Luke Mewburn <Luke@Mewburn.net>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
.\" BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
.\" OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
.\" ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
.\" TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
.\" USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd November 23, 2014
.Os
.Dt LKONF 3
.Sh NAME
.Nm lkonf
.Nd use Lua as configuration for C applications.
.Sh LIBRARY
.Lb lkonf
.Sh SYNOPSIS
.In lkonf.h
.Ft "lkonf_context *"
.Fn lkonf_construct "void"
.Ft void
.Fn lkonf_destruct "lkonf_context * iLc"
.Ft "lua_State *"
.Fn lkonf_get_lua_State "lkonf_context * iLc"
.Ft lkerr_t
.Fn lkonf_get_error_code "lkonf_context * iLc"
.Ft lkerr_t
.Fn lkonf_get_error_string "lkonf_context * iLc"
.Ft lkerr_t
.Fn lkonf_load_file "lkonf_context * iLc" "const char * iFile"
.Ft lkerr_t
.Fn lkonf_load_string "lkonf_context * iLc" "const char * iString"
.Ft int
.Fn lkonf_get_instruction_limit "lkonf_context * iLc"
.Ft lkerr_t
.Fn lkonf_set_instruction_limit "lkonf_context * iLc" "const int iLimit"
.Ft lkerr_t
.Fn lkonf_get_boolean "lkonf_context * iLc" "const char * iPath" "bool * oValue"
.Ft lkerr_t
.Fn lkonf_getkey_boolean "lkonf_context * iLc" "lkonf_keys iKeys" "bool * oValue"
.Ft lkerr_t
.Fn lkonf_get_double "lkonf_context * iLc" "const char * iPath" "double * oValue"
.Ft lkerr_t
.Fn lkonf_getkey_double "lkonf_context * iLc" "lkonf_keys iKeys" "double * oValue"
.Ft lkerr_t
.Fn lkonf_get_integer "lkonf_context * iLc" "const char * iPath" "lua_Integer * oValue"
.Ft lkerr_t
.Fn lkonf_getkey_integer "lkonf_context * iLc" "lkonf_keys iKeys" "lua_Integer * oValue"
.Ft lkerr_t
.Fn lkonf_get_string "lkonf_context * iLc" "const char * iPath" "char ** oValue" "size_t * oLen"
.Ft lkerr_t
.Fn lkonf_getkey_string "lkonf_context * iLc" "lkonf_keys iKeys" "char ** oValue" "size_t * oLen"
.
.Sh DESCRIPTION
The
.Nm
library provides an interface for C applications to obtain configuration
from sandboxed Lua files or strings.
.Pp
These functions are available in the
.Nm liblkonf
library (which needs the
.Nm liblua
library).
Programs should be linked with
.Fl lkonf llua .
.
.Sh COMMON TYPES
.Nm
provides various data types:
.Bl -tag -width "lkonf_context "
.It Fa lkonf_context
Opaque type used by the
.Nm
functions.
.It Fa lkonf_keys
Array of table keys.
.It Fa lkerr_t
Enumeration for error codes.
.El
.
.Sh OBJECT AND ERROR MANAGEMENT FUNCTIONS
The following functions are available to manage
.Fa lkonf_context
construction and destruction and to access error state:
.Bl -tag -width 4n
.It Fn lkonf_construct
Construct an
.Fa lkonf_context .
The internal Lua state is created with
.Fn luaL_newstate .
If there was an error constructing the Lua state, the error code will be set.
Returns the
.Fa lkonf_context
created with default parameters, or
.Dv 0
on failure.
.It Fn lkonf_destruct
Destroy an
.Fa lkonf_context .
.It Fn lkonf_get_lua_State
Returns the Lua state used by
.Fa iLc .
This may be useful for manipulating the sandbox,
adjusting panic functions, etc.
If iLc is 0 or there's a fault in the internal state, returns
.Dv 0 .
.It Fn lkonf_get_error_code
Returns the error code from the most recent
.Fa lkonf_context
operation (if any), or
.Dv LK_LKONF_NULL
if
.Fa iLc
is
.Dv 0 .
.It Fn lkonf_get_error_string
Returns the error string from the most recent
.Fa lkonf_context
operation (if any), or
.Dv 0
if
.Fa iLc
is
.Dv 0 .
.El
.
.Sh LOAD AND SANDBOX FUNCTIONS
.Bl -tag -width 4n
.It Fn lkonf_load_file
Load file as a Lua chunk and execute in the sandbox.
Returns error code, or
.Dv LK_OK
if ok.
.It Fn lkonf_load_string
Load string as a Lua chunk and execute in the sandbox.
Returns error code, or
.Dv LK_OK
if ok.
.It Fn lkonf_get_instruction_limit
Get the current instruction limit.
Returns the instruction limit, or
.Dv -1
if
.Fa iLc
is
.Dv 0 .
.It Fn lkonf_set_instruction_limit
Set the instruction limit.
Returns error code, or
.Dv LK_OK
if ok.
.El
.
.Sh VALUE RETRIEVAL FUNCTIONS
.Bl -tag -width 4n
.It Fn lkonf_get_boolean
Get boolean value at
.Fa iPath .
The value at
.Fa iPath
must be either a boolean
or a function that returns a boolean when called as
.Fn function "iPath" .
Returns error code, or
.Dv LK_OK
if
.Fa oValue
populated.
.It Fn lkonf_getkey_boolean
As
.Fn lkonf_get_boolean
except using
.Ft lkonf_keys
instead of a path,
and the function is called with the last key in
.Fa iKeys .
.It Fn lkonf_get_double
Get double value at
.Fa iPath .
The value at
.Fa iPath
must be either a double
or a function that returns a double when called as
.Fn function "iPath" .
Returns error code, or
.Dv LK_OK
if
.Fa oValue
populated.
.It Fn lkonf_getkey_double
As
.Fn lkonf_get_double
except using
.Ft lkonf_keys
instead of a path,
and the function is called with the last key in
.Fa iKeys .
.It Fn lkonf_get_integer
Get integer value at
.Fa iPath .
The value at
.Fa iPath
must be either an integer
or a function that returns an integer when called as
.Fn function "iPath" .
Returns error code, or
.Dv LK_OK
if
.Fa oValue
populated.
.It Fn lkonf_getkey_integer
As
.Fn lkonf_get_integer
except using
.Ft lkonf_keys
instead of a path,
and the function is called with the last key in
.Fa iKeys .
.It Fn lkonf_get_string
Get string value at
.Fa iPath .
The value at
.Fa iPath
must be either a string
or a function that returns a string when called as
.Fn function "iPath" .
Returns error code, or
.Dv LK_OK
if
.Fa oValue
(and if it is not
.Dv NULL ,
.Fa oLen )
populated.
.It Fn lkonf_getkeys_string
As
.Fn lkonf_get_string
except using
.Ft lkonf_keys
instead of a path,
and the function is called with the last key in
.Fa iKeys .
.El
.
.\"XXX.Sh EXAMPLES
.\"XXX: provide some examples
.Sh SEE ALSO
.Xr lua 1
.Sh HISTORY
The
.Nm
library was first released in 2014.
.Sh AUTHORS
The
.Nm
library was written by Luke Mewburn.
Marc Balmer contributed design ideas.
